print(conf_matrix_result)
write("Confusion Matrix:", con)
write.table(conf_matrix_table, con, sep = "\t")
write("\nOverall Statistics:", con)
write.table(as.data.frame(overall_stats), con, sep = "\t", row.names = TRUE)
write("\nClass Statistics:", con)
write.table(as.data.frame(t(class_stats)), con, sep = "\t", row.names = TRUE)
}
# Close the connection
close(con)
}
##################################################################################################
####################################### Main Program  ############################################
##################################################################################################
# Read datasets
#dataset_names <- c("Gene_Expression_Dataset_1_GSE73072.csv", "Gene_Expression_Dataset_2_GSE68310.csv", "Gene_Expression_Dataset_3_GSE90732.csv", "Gene_Expression_Dataset_4_GSE61754.csv")
dataset_names <- c("Gene_Expression_Dataset_3_GSE90732.csv", "Gene_Expression_Dataset_4_GSE61754.csv")
for(dataset_name in dataset_names) {
Gene_Exp_Data <- read_gene_expression_data(dataset_name, input_path)
# Split data
splits <- split_data(Gene_Exp_Data, data_partition_seed, dataset_name)
# Model building using training data
print("########### Starting KNN learning using training data ###########")
# Model building using training data
trained_knn_model <- train_knn_model(as.matrix(splits$train_data[,-c(1:6)]), # supply train data after removing labels and other demographic info columns. Only supply gene expression data
as.factor(splits$train_data$True_Class_Label), ml_model_seed)
# Print KNN training results
print("KNN training results:")
print(trained_knn_model)
# Performing validation and hyper parameter selection using validation data
validation_knn_model <- train_knn_model(as.matrix(splits$valid_data[,-c(1:6)]),
as.factor(splits$valid_data$True_Class_Label), ml_model_seed)
# Print KNN validation results
#print(paste0("KNN validation results: ", validation_knn_model))
cat("\n")
print("########### Starting validation process ###########")
cat("\n")
print("KNN validation results:")
print(validation_knn_model)
# Selecting final model parameters
final_k <- validation_knn_model$finalModel$tuneValue[1]
# Print final parameter values
print(paste0("Final value of k: ", final_k))
# Final model building using KNN
final_knn_trained_model <- train_knn_model(as.matrix(splits$full_train_data[,-c(1:6)]),
as.factor(splits$full_train_data$True_Class_Label),
ml_model_seed, final_k)
# Test KNN
cat("\n")
print("########### Starting prediction for holdout testset ###########")
cat("\n")
knn_predictions <- predict_test(final_knn_trained_model, splits$holdout_test)
# Write results to a text file for full holdout testset
write_confusion_to_txt(knn_predictions, as.factor(splits$holdout_test$True_Class_Label), "KNN", dataset_name, output_path)
# Result for Testset 1a or  Testset 2a only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
# Test KNN
knn_predictions <- predict_test(final_knn_trained_model, splits$holdout_test_a)
data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
# Create the filename
result_filename <- paste0(data_name, "_holdout_testset_a_results.txt")
# Write results to a text file for holdout_testset_a
write_confusion_to_txt(knn_predictions, as.factor(splits$holdout_test_a$True_Class_Label), "KNN", result_filename, output_path)
}
# Result for  Testset 1b or Testset 2b only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
# Test KNN
knn_predictions <- predict_test(final_knn_trained_model, splits$holdout_test_b)
data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
# Create the filename
result_filename <- paste0(data_name, "_holdout_testset_b_results.txt")
# Write results to a text file for holdout_testset_b
write_confusion_to_txt(knn_predictions, as.factor(splits$holdout_test_b$True_Class_Label), "KNN", result_filename, output_path)
}
# # Code for RF model building, validation and evaluation
# # Model building using training data
# print("########### Starting RF learning using training data ###########")
# trained_rf_model <- train_rf_model(as.matrix(splits$train_data[,-c(1:6)]),
#                                    as.factor(splits$train_data$True_Class_Label), ml_model_seed)
#
# # Print RF training results
# print("RF training results:")
# print(trained_rf_model)
#
# # Performing validation and hyper parameter selection using validation data
# validation_rf_model <- train_rf_model(as.matrix(splits$valid_data[,-c(1:6)]),
#                                       as.factor(splits$valid_data$True_Class_Label), ml_model_seed)
#
# # Print RF validation results
# print("########### RF validation results ###########")
# print(validation_rf_model)
#
# # Selecting final model parameters
# final_mtry <- validation_rf_model$finalModel$mtry
# final_n_tree <- validation_rf_model$finalModel$ntree
#
# # Print final parameter values
# print("Final value of mtry (na) is:")
# print(final_mtry)
# print("Final value of n_tree (nt) is:")
# print(final_n_tree)
#
#
# # Final model building using RF
# final_rf_trained_model <- train_rf_model(as.matrix(splits$full_train_data[,-c(1:6)]),
#                                          as.factor(splits$full_train_data$True_Class_Label),
#                                          ml_model_seed, final_mtry, final_n_tree)
#
# # Test RF model
# print("########### Starting prediction for holdout testset ###########")
# rf_predictions <- predict(final_rf_trained_model, newdata = as.matrix(splits$hold_out_test[,-c(1:6)]))
#
# # Write results to a text file for full holdout testset
# write_confusion_to_txt(rf_predictions, as.factor(splits$hold_out_test$True_Class_Label), "RF", dataset_name, output_path)
#
# # Result for Testset 1a or  Testset 2a only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
# if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#   # Test RF
#   rf_predictions <- predict(final_rf_trained_model, newdata = as.matrix(splits$hold_out_test_a[,-c(1:6)]))
#
#   data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#   # Create the filename
#   result_filename <- paste0(data_name, "_holdout_testset_a_results.txt")
#
#   # Write results to a text file for holdout_testset_a
#   write_confusion_to_txt(rf_predictions, as.factor(splits$hold_out_test_a$True_Class_Label), "RF", result_filename, output_path)
# }
#
# # Result for  Testset 1b or Testset 2b only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
# if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#   # Test RF
#   rf_predictions <- predict(final_rf_trained_model, newdata = as.matrix(splits$hold_out_test_b[,-c(1:6)]))
#
#   data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#   # Create the filename
#   result_filename <- paste0(data_name, "_holdout_testset_b_results.txt")
#
#   # Write results to a text file for holdout_testset_b
#   write_confusion_to_txt(rf_predictions, as.factor(splits$hold_out_test_b$True_Class_Label), "RF", result_filename, output_path)
# }
#
# # Code for LSVM model building, validation and evaluation
# # Model building using training data
# print("###########  Starting Linear SVM learning using training data ########### ")
# trained_LSVM_model <- train_LSVM_model(as.matrix(splits$train_data[,-c(1:6)]),
#                                        as.factor(splits$train_data$True_Class_Label), ml_model_seed)
#
# # Print LSVM training results
# print("LSVM training results:")
# print(trained_LSVM_model)
#
# # Performing validation and hyper parameter selection using validation data
# validation_LSVM_model <- train_LSVM_model(as.matrix(splits$valid_data[,-c(1:6)]),
#                                           as.factor(splits$valid_data$True_Class_Label), ml_model_seed)
#
# # Print LSVM validation results
# print("########### LSVM validation results ########### ")
# print(validation_LSVM_model)
#
# # Selecting final model parameters
# final_C <- validation_LSVM_model$finalModel@param$C
#
#
# # Print final parameter values
# print("Final value of parameter C of LSVM:")
# print(final_C)
#
# # Final model building using LSVM
# final_LSVM_trained_model <- train_LSVM_model(as.matrix(splits$full_train_data[,-c(1:6)]),
#                                              as.factor(splits$full_train_data$True_Class_Label),
#                                              ml_model_seed, final_C)
#
# # Test LSVM model
# print("########### Starting prediction for holdout testset ###########")
# LSVM_predictions <- predict(final_LSVM_trained_model, newdata = as.matrix(splits$hold_out_test[,-c(1:6)]))
#
# # Write results to a text file for full holdout testset
# write_confusion_to_txt(LSVM_predictions, as.factor(splits$hold_out_test$True_Class_Label), "LSVM", dataset_name, output_path)
#
# # Result for Testset 1a or  Testset 2a only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
# if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#   # Test LSVM
#   LSVM_predictions <- predict(final_LSVM_trained_model, newdata = as.matrix(splits$hold_out_test_a[,-c(1:6)]))
#
#   data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#   # Create the filename
#   result_filename <- paste0(data_name, "_holdout_testset_a_results.txt")
#
#   # Write results to a text file for holdout_testset_a
#   write_confusion_to_txt(LSVM_predictions, as.factor(splits$hold_out_test_a$True_Class_Label), "LSVM", result_filename, output_path)
# }
#
# # Result for  Testset 1b or Testset 2b only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
# if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#   # Test LSVM
#   LSVM_predictions <- predict(final_LSVM_trained_model, newdata = as.matrix(splits$hold_out_test_b[,-c(1:6)]))
#
#   data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#   # Create the filename
#   result_filename <- paste0(data_name, "_holdout_testset_b_results.txt")
#
#   # Write results to a text file for holdout_testset_b
#   write_confusion_to_txt(LSVM_predictions, as.factor(splits$hold_out_test_b$True_Class_Label), "LSVM", result_filename, output_path)
# }
#
# # Code for RBF_SVM model building, validation and evaluation
# # Model building using training data
# print("###########  Starting RBF SVM learning using training data ########### ")
# trained_RBF_SVM_model <- train_RBF_SVM_model(as.matrix(splits$train_data[,-c(1:6)]),
#                                              as.factor(splits$train_data$True_Class_Label), ml_model_seed)
#
# # Print RBF_SVM training results
# print("RBF SVM training results:")
# print(trained_RBF_SVM_model)
#
# # Performing validation and hyper parameter selection using validation data
# validation_RBF_SVM_model <- train_RBF_SVM_model(as.matrix(splits$valid_data[,-c(1:6)]),
#                                                 as.factor(splits$valid_data$True_Class_Label), ml_model_seed)
#
# # Print RBF_SVM validation results
# print("###########  RBF SVM validation results ########### ")
# print(validation_RBF_SVM_model)
#
# # Selecting final model parameters
# final_sigma <- validation_RBF_SVM_model$bestTune$sigma
# final_C = validation_RBF_SVM_model$bestTune$C
#
#
# # Print final parameter values
# print("Final value of parameter C of RBF SVM:")
# print(final_C)
# print("Final value of parameter sigma of RBF SVM:")
# print(final_sigma)
#
# # Final model building using SVM
# final_RBF_SVM_trained_model <- train_RBF_SVM_model(as.matrix(splits$full_train_data[,-c(1:6)]),
#                                                    as.factor(splits$full_train_data$True_Class_Label),
#                                                    ml_model_seed, final_C, final_sigma)
#
# # Test RBF_SVM model
# print("########### Starting prediction for holdout testset ###########")
# SVM_predictions <- predict(final_RBF_SVM_trained_model, newdata = as.matrix(splits$hold_out_test[,-c(1:6)]))
#
# # Write results to a text file for full holdout testset
# write_confusion_to_txt(SVM_predictions, as.factor(splits$hold_out_test$True_Class_Label), "RBF_SVM", dataset_name, output_path)
#
# # Result for Testset 1a or  Testset 2a only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
# if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#   # Test RBF_SVM
#   SVM_predictions <- predict(final_RBF_SVM_trained_model, newdata = as.matrix(splits$hold_out_test_a[,-c(1:6)]))
#
#   data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#   # Create the filename
#   result_filename <- paste0(data_name, "_holdout_testset_a_results.txt")
#
#   # Write results to a text file for holdout_testset_a
#   write_confusion_to_txt(SVM_predictions, as.factor(splits$hold_out_test_a$True_Class_Label), "RBF_SVM", result_filename, output_path)
# }
#
# # Result for  Testset 1b or Testset 2b only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
# if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#   # Test RBF_SVM
#   SVM_predictions <- predict(final_RBF_SVM_trained_model, newdata = as.matrix(splits$hold_out_test_b[,-c(1:6)]))
#
#   data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#   # Create the filename
#   result_filename <- paste0(data_name, "_holdout_testset_b_results.txt")
#
#   # Write results to a text file for holdout_testset_b
#   write_confusion_to_txt(SVM_predictions, as.factor(splits$hold_out_test_b$True_Class_Label), "RBF_SVM", result_filename, output_path)
# }
#
# # Code for XGBoost model building, validation and evaluation
# # Model building using training data
# print("###########  Starting XGBoost learning using training data ########### ")
# trained_XGBoost_model <- train_XGBoost_model(as.matrix(splits$train_data[,-c(1:6)]),
#                                              as.factor(splits$train_data$True_Class_Label), ml_model_seed)
#
# # Print XGBoost training results
# print("XGBoost training results:")
# print(trained_XGBoost_model)
#
# # Performing validation and hyper parameter selection using validation data
# validation_XGBoost_model <- train_XGBoost_model(as.matrix(splits$valid_data[,-c(1:6)]),
#                                                 as.factor(splits$valid_data$True_Class_Label), ml_model_seed)
#
# # Print XGBoost validation results
# print("########### XGBoost validation results ###########")
# print(validation_XGBoost_model)
#
# # Selecting final model parameters
# final_max_depth <- validation_XGBoost_model$bestTune$max_depth
# final_eta <- validation_XGBoost_model$bestTune$eta
# final_nrounds <- validation_XGBoost_model$bestTune$nrounds
#
# # Print final parameter values
# print("Final value of parameter max depth of XGBoost:")
# print(final_max_depth)
# print("Final value of parameter eta of XGBoost:")
# print(final_eta)
# print("Final value of parameter rounds of XGBoost:")
# print(final_nrounds)
#
#
# # Final model building using XGBoost
# final_XGBoost_trained_model <- train_XGBoost_model(as.matrix(splits$full_train_data[,-c(1:6)]),
#                                                    as.factor(splits$full_train_data$True_Class_Label),
#                                                    ml_model_seed, final_max_depth, final_eta, final_nrounds)
#
# # Test XGBoost model
# print("########### Starting prediction for holdout testset ###########")
# XGBoost_predictions <- predict(final_XGBoost_trained_model, newdata = as.matrix(splits$hold_out_test[,-c(1:6)]))
#
#
# # Write results to a text file for full holdout testset
# write_confusion_to_txt(as.factor(XGBoost_predictions), as.factor(splits$hold_out_test$True_Class_Label), "XGBoost", dataset_name, output_path)
#
# # Result for Testset 1a or  Testset 2a only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
# if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#
#   # Test XGBoost model
#   XGBoost_predictions <- predict(final_XGBoost_trained_model, newdata = as.matrix(splits$hold_out_test_a[,-c(1:6)]))
#
#   data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#   # Create the filename
#   result_filename <- paste0(data_name, "_holdout_testset_a_results.txt")
#
#   # Write results to a text file
#   write_confusion_to_txt(as.factor(XGBoost_predictions), as.factor(splits$hold_out_test_a$True_Class_Label), "XGBoost", result_filename, output_path)
#
# }
#
# # Result for  Testset 1b or Testset 2b only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
# if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#
#   # Test XGBoost model
#   XGBoost_predictions <- predict(final_XGBoost_trained_model, newdata = as.matrix(splits$hold_out_test_b[,-c(1:6)]))
#
#   data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#   # Create the filename
#   result_filename <- paste0(data_name, "_holdout_testset_b_results.txt")
#
#   # Write results to a text file
#   write_confusion_to_txt(as.factor(XGBoost_predictions), as.factor(splits$hold_out_test_b$True_Class_Label), "XGBoost", result_filename, output_path)
#
# } # End if condition
#
#
#
# # Read Knowledge Bases
#
# KB_names <- c("DisGeNet_Knowledge_Base.csv", "CTD_Knowledge_Base.csv")
# for(KB_name in KB_names) {
#   KB <- read_KBs(KB_name, input_path)
#
#
#   print(paste0("Dataset name: ", dataset_name))
#   print(paste0("KB name: ", KB_name))
#
#   ##################################################################################################
#   ######################################## SCADDx  #################################################
#   ##################################################################################################
#
#   # Model building using training data
#   print("########### Starting SCADDx learning using training data ###########")
#
#   trained_SCADDx_model <- SCADDx_model(KB, splits$train_data, splits$train_data$True_Class_Label, ml_model_seed, dataset_name, KB_name, output_path, "SCADDx", "Train")
#
#
#   # Print SCADDx training results
#   print("SCADDx training results:")
#   print(trained_SCADDx_model)
#
#   # Performing validation and hyper parameter selection using validation data
#   validation_SCADDx_model <- SCADDx_model(KB, splits$valid_data, splits$valid_data$True_Class_Label, ml_model_seed, dataset_name, KB_name, output_path, "SCADDx", "Validation")
#
#
#   # Print SCADDx validation results
#   print("SCADDx validation results:")
#   print(validation_SCADDx_model)
#
#   # Selecting best value of P and Q based on the performance on validation set
#   P <- validation_SCADDx_model[validation_SCADDx_model$Avg_Acc == max(validation_SCADDx_model$Avg_Acc), "P"][1]
#   Q <- validation_SCADDx_model[validation_SCADDx_model$Avg_Acc == max(validation_SCADDx_model$Avg_Acc), "Q"][1]
#
#   # Print final parameter values
#   print(paste0("Final value of P is: ", P))
#   print(paste0("Final value of Q is: ", Q))
#
#   # Test SCADDx
#   cat("\n")
#   print("########### Starting prediction for holdout testset ###########")
#   cat("\n")
#
#   SCADDx_predictions <- SCADDx_model(KB, splits$holdout_test, splits$holdout_test$True_Class_Label, ml_model_seed, dataset_name, KB_name, output_path, "SCADDx", "Holdout_test", P, Q)
#
#   # Print SCADDx holdout testset results
#   print("SCADDx holdout testset results: Accuracy on different values of top n diseases")
#   print(SCADDx_predictions)
#
#
#   # Result for Testset 1a or  Testset 2a only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
#   if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#
#     data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#     # Create the file name
#     result_filename <- paste0(data_name, "_holdout_testset_a_results.txt")
#
#     SCADDx_predictions <- SCADDx_model(KB, splits$holdout_test_a, splits$holdout_test_a$True_Class_Label, ml_model_seed, result_filename, KB_name, output_path, "SCADDx", "Holdout_test", P, Q)
#
#     # Print SCADDx holdout testset results
#     print(paste0(data_name,"_SCADDx_Holdout_", "Testset_a_results:"))
#     print(SCADDx_predictions)
#
#   }
#
#   # Result for  Testset 1b or Testset 2b only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
#   if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#
#     data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#     # Create the file name
#     result_filename <- paste0(data_name, "_holdout_testset_b_results.txt")
#
#     SCADDx_predictions <- SCADDx_model(KB, splits$holdout_test_b, splits$holdout_test_b$True_Class_Label, ml_model_seed, result_filename, KB_name, output_path, "SCADDx", "Holdout_test", P, Q)
#
#     # Print SCADDx holdout testset results
#     print(paste0(data_name,"_SCADDx_Holdout_", "Testset_b_results:"))
#     print(SCADDx_predictions)
#   }
#
#   ##################################################################################################
#   ####################################### End SCADDx  ##############################################
#   ##################################################################################################
#
#
#   ##################################################################################################
#   ######################################## LOADDx  #################################################
#   ##################################################################################################
#
#   # Model building using training data
#   print("########### Starting LOADDx learning using training data ###########")
#
#   trained_LOADDx_model <- LOADDx_model(KB, splits$train_data, splits$train_data$True_Class_Label, ml_model_seed, dataset_name, KB_name, output_path, "LOADDx", "Train")
#
#
#   # Print LOADDx training results
#   print("LOADDx training results:")
#   print(trained_LOADDx_model)
#
#   # Performing validation and hyper parameter selection using validation data
#   validation_LOADDx_model <- LOADDx_model(KB, splits$valid_data, splits$valid_data$True_Class_Label, ml_model_seed, dataset_name, KB_name, output_path, "LOADDx", "Validation")
#
#
#   # Print LOADDx validation results
#   print("LOADDx validation results:")
#   print(validation_LOADDx_model)
#
#   # Selecting best value of P and Q based on the performance on validation set
#   P <- validation_LOADDx_model[validation_LOADDx_model$Avg_Acc == max(validation_LOADDx_model$Avg_Acc), "P"][1]
#   Q <- validation_LOADDx_model[validation_LOADDx_model$Avg_Acc == max(validation_LOADDx_model$Avg_Acc), "Q"][1]
#
#   # Print final parameter values
#   print(paste0("Final value of P is: ", P))
#   print(paste0("Final value of Q is: ", Q))
#
#   # Test LOADDx
#   cat("\n")
#   print("########### Starting prediction for holdout testset ###########")
#   cat("\n")
#
#   LOADDx_predictions <- LOADDx_model(KB, splits$holdout_test, splits$holdout_test$True_Class_Label, ml_model_seed, dataset_name, KB_name, output_path, "LOADDx", "Holdout_test", P, Q)
#
#   # Print LOADDx holdout testset results
#   print("LOADDx holdout testset results: Accuracy on different values of top n diseases")
#   print(LOADDx_predictions)
#
#
#   # Result for Testset 1a or  Testset 2a only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
#   if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#
#     data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#     # Create the file name
#     result_filename <- paste0(data_name, "_holdout_testset_a_results.txt")
#
#     LOADDx_predictions <- LOADDx_model(KB, splits$holdout_test_a, splits$holdout_test_a$True_Class_Label, ml_model_seed, result_filename, KB_name, output_path, "LOADDx", "Holdout_test", P, Q)
#
#     # Print SCADDx holdout testset results
#     print(paste0(data_name,"_LOADDx_Holdout_", "Testset_a_results:"))
#     print(LOADDx_predictions)
#
#   }
#
#   # Result for  Testset 1b or Testset 2b only for Gene_Expression_Dataset_1 and Gene_Expression_Dataset_2
#   if(dataset_name == "Gene_Expression_Dataset_1_GSE73072.csv" | dataset_name == "Gene_Expression_Dataset_2_GSE68310.csv") {
#
#     data_name <- substr(dataset_name, 1, nchar(dataset_name) - 4)
#     # Create the file name
#     result_filename <- paste0(data_name, "_holdout_testset_b_results.txt")
#
#     LOADDx_predictions <- LOADDx_model(KB, splits$holdout_test_b, splits$holdout_test_b$True_Class_Label, ml_model_seed, result_filename, KB_name, output_path, "LOADDx", "Holdout_test", P, Q)
#
#     # Print SCADDx holdout testset results
#     print(paste0(data_name,"_LOADDx_Holdout_", "Testset_b_results:"))
#     print(LOADDx_predictions)
#   }
#
#   ##################################################################################################
#   ####################################### End LOADDx  ##############################################
#   ##################################################################################################
#
# }
}
